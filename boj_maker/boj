#!/usr/bin/python
import re
import subprocess
import textwrap
while True:
    try:
        import argparse
        import sys
        import logging
        from liboj import makeboj, runboj, utils
        from liboj.parser import ParserError
        break
    except ModuleNotFoundError as e:
        missing_module = re.search("'([a-z A-Z0-9]+)'", str(e)).group(1)
        print(f"Module '{missing_module}' is missing. Downloading...")
        subprocess.run(['python', '-m', 'pip', 'install', missing_module])


class CustomFormatter(logging.Formatter):
    green = '\x1b[32;1m'
    grey = "\x1b[38;20m"
    yellow = "\x1b[33;20m"
    red = "\x1b[31;20m"
    bold_red = "\x1b[31;1m"
    reset = "\x1b[0m"
    format = "%(levelname)s:%(name)s - %(message)s"

    FORMATS = {
        logging.DEBUG: grey + format + reset,
        logging.INFO: green + format + reset,
        logging.WARNING: yellow + format + reset,
        logging.ERROR: red + format + reset,
        logging.CRITICAL: bold_red + format + reset
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Help users focus on Baekjoon.', usage=f"{sys.argv[0]} -h")

    subparsers = parser.add_subparsers(
        dest='command', required=True, metavar="command")

    parser_make = subparsers.add_parser(
        'make', help='Make new problem dir', usage=f"{sys.argv[0]} make (id) [option]", prog=" ".join(sys.argv[:-1]))
    parser_make.add_argument("pro_num", help="Problem number", metavar="id")
    parser_make.add_argument(
        "-f", "--force", help="Make force", action="store_true", dest="force")
    parser_make.add_argument(
        "-g", "--gpt", help="gpt가 readme를 수정해 줍니다.", action="store_true", dest="gpt")
    parser_make.add_argument("--debug", help="debuging", action="store_true")

    parser_run = subparsers.add_parser(
        'run', help="문제 정답을 컴파일 합니다.", usage=f"{sys.argv[0]} run (id) [option]")
    parser_run.add_argument("pro_num", help="Problem number", metavar="id")
    parser_run.add_argument(
        "-n", "--name", help="파일 이름 지정(경로 아님)", action="store", dest="name")
    parser_run.add_argument(
        "-c", "--no-check", help="정답을 확인하지 않음", action="store_true", dest="noCheck")
    parser_run.add_argument(
        "-o", "--one", help="첫 번째 input만 테스트함", action="store_true", dest="one")
    parser_run.add_argument(
        "-r", "--repeat", help="파일이 변경 될 때 마다 반복", action="store_true", dest="repeat")
    parser_run.add_argument("--debug", help="debuging", action="store_true")

    parser_update = subparsers.add_parser(
        'update', help="readme 파일을 업데이트 합니다.", usage=f"{sys.argv[0]} update (id|all) [option]")
    parser_update.add_argument(
        "pro_num", help="Problem number", metavar="id|all")
    parser_update.add_argument(
        "-g", "--gpt", help="gpt가 readme를 수정해 줍니다.", action="store_true", dest="gpt")
    parser_update.add_argument(
        "-t", help="testdata도 업데이트 합니다.", action="store_true", dest="test")
    parser_update.add_argument("--debug", help="debuging", action="store_true")

    parser_random = subparsers.add_parser(
        'random', help="랜덤으로 문제를 가져옵니다.", usage=f"{sys.argv[0]} random [option]"
    )

    parser_random.add_argument(
        "level", help="problem level", metavar="LEVEL", nargs="*")
    parser_random.add_argument(
        "-r", "--repeat", help="반복합니다.", action="store_true", dest='repeat')
    parser_random.add_argument("--debug", help="debuging", action="store_true")

    args = parser.parse_args()

    ch = logging.StreamHandler()
    ch.setFormatter(CustomFormatter())
    logger = logging.getLogger()
    if args.debug:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    logger.addHandler(ch)

    try:
        command = args.command
        if command == "make":
            makeboj.run(args=args)
        elif command == "run":
            runboj.run(args=args)
        elif command == "update":
            utils.update(args=args)
        elif command == "random":
            utils.random(args=args)
    except ParserError:
        logger.error(f"문제 번호가 존재하지 않습니다.")
